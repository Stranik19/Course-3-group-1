Создание таблиц

----------------------------------------------

-- Создание таблицы пользователей
CREATE TABLE IF NOT EXISTS Users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    email_verified BOOLEAN NOT NULL DEFAULT 0,
    password TEXT NOT NULL,
    phone_number TEXT
);

-- Создание таблицы комнат
CREATE TABLE IF NOT EXISTS Rooms (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    home_type TEXT NOT NULL,
    address TEXT NOT NULL,
    has_tv BOOLEAN NOT NULL DEFAULT 0,
    has_internet BOOLEAN NOT NULL DEFAULT 0,
    has_kitchen BOOLEAN NOT NULL DEFAULT 0,
    has_air_con BOOLEAN NOT NULL DEFAULT 0,
    price REAL NOT NULL,
    owner_id INTEGER NOT NULL,
    latitude REAL,
    longitude REAL,
    FOREIGN KEY (owner_id) REFERENCES Users(id)
);

-- Создание таблицы резерваций
CREATE TABLE IF NOT EXISTS Reservations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    room_id INTEGER NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    price REAL NOT NULL,
    total REAL NOT NULL,
    FOREIGN KEY (user_id) REFERENCES Users(id),
    FOREIGN KEY (room_id) REFERENCES Rooms(id)
);

-- Создание таблицы отзывов
CREATE TABLE IF NOT EXISTS Reviews (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    reservation_id INTEGER NOT NULL,
    rating INTEGER NOT NULL CHECK (rating BETWEEN 1 AND 5),
    FOREIGN KEY (reservation_id) REFERENCES Reservations(id)
);


Заполнение таблиц

----------------------------------------------

-- Заполнение таблицы Users
INSERT INTO Users (name, email, email_verified, password, phone_number) VALUES
('Alice Johnson', 'alice.johnson@example.com', 1, 'hashed_password_1', '555-1234'),
('Bob Smith', 'bob.smith@example.com', 0, 'hashed_password_2', '555-5678'),
('Charlie Brown', 'charlie.brown@example.com', 1, 'hashed_password_3', '555-9876');

-- Заполнение таблицы Rooms
INSERT INTO Rooms (home_type, address, has_tv, has_internet, has_kitchen, has_air_con, price, owner_id, latitude, longitude) VALUES
('Apartment', '123 Maple Street', 1, 1, 1, 1, 120.00, 1, 37.7749, -122.4194),
('Studio', '456 Oak Avenue', 1, 0, 1, 0, 80.00, 2, 34.0522, -118.2437),
('House', '789 Pine Road', 1, 1, 1, 1, 200.00, 1, 40.7128, -74.0060);

-- Заполнение таблицы Reservations
INSERT INTO Reservations (user_id, room_id, start_date, end_date, price, total) VALUES
(1, 1, '2024-08-01', '2024-08-07', 120.00, 840.00),
(2, 2, '2024-08-05', '2024-08-10', 80.00, 400.00),
(1, 3, '2024-08-10', '2024-08-15', 200.00, 1000.00);

-- Заполнение таблицы Reviews
INSERT INTO Reviews (reservation_id, rating) VALUES
(1, 5),
(2, 4),
(3, 5);


Фильтрация

----------------------------------------------

-- Получить все комнаты, в которых есть телевизор и интернет
SELECT * FROM Rooms
WHERE has_tv = 1 AND has_internet = 1;

-- Получить список всех бронирования для пользователя с id = 1
SELECT r.id, r.start_date, r.end_date, r.price, r.total, rm.address
FROM Reservations r
JOIN Rooms rm ON r.room_id = rm.id
WHERE r.user_id = 1;

-- Найти комнаты, которые доступны для бронирования в определённый период времени (выбирайте диапазон, отталкиваясь от ваших дат бронирования)
SELECT * FROM Rooms r
WHERE NOT EXISTS (
    SELECT 1 FROM Reservations res
    WHERE res.room_id = r.id
    AND ((res.start_date <= @EndDate AND res.end_date >= @StartDate))
);

-- Получить среднюю цену по всем комнатам
SELECT AVG(price) AS average_price
FROM Rooms;

-- Получить общую сумму доходов от бронирований за определённый период (выбирайте самостоятельно)
SELECT SUM(total) AS total_revenue
FROM Reservations
WHERE start_date >= @StartDate AND end_date <= @EndDate;

-- Найти комнаты, которые имеют определённый диапазон цен (выбирайте самостоятельно)
SELECT * FROM Rooms
WHERE price BETWEEN @MinPrice AND @MaxPrice;


-- Получить количество отзывов и среднюю оценку для каждой комнаты
SELECT rm.id, rm.address, COUNT(rv.id) AS review_count, AVG(rv.rating) AS average_rating
FROM Rooms rm
LEFT JOIN Reservations res ON rm.id = res.room_id
LEFT JOIN Reviews rv ON res.id = rv.reservation_id
GROUP BY rm.id, rm.address;

-- Показать пользователей, которые не подтвердили свой email
SELECT id, name, email
FROM Users
WHERE email_verified = 0;

-- Найти комнаты, которые являются самыми дорогими в каждой категории по типу жилья
SELECT home_type, MAX(price) AS highest_price
FROM Rooms
GROUP BY home_type;


