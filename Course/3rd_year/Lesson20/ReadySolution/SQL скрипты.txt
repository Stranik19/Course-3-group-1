Создание таблиц

-----------------------------------------

-- Создание таблицы Teachers (Учителя)
CREATE TABLE IF NOT EXISTS Teachers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    phone_number TEXT
);

-- Создание таблицы Students (Студенты)
CREATE TABLE IF NOT EXISTS Students (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE,
    phone_number TEXT
);

-- Создание таблицы Subjects (Предметы)
CREATE TABLE IF NOT EXISTS Subjects (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    subject_name TEXT NOT NULL
);

-- Создание таблицы Classes (Классы)
CREATE TABLE IF NOT EXISTS Classes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    class_name TEXT NOT NULL,
    room_number TEXT
);

-- Создание таблицы ClassStudents (Связь между классами и студентами)
CREATE TABLE IF NOT EXISTS ClassStudents (
    class_id INTEGER NOT NULL,
    student_id INTEGER NOT NULL,
    FOREIGN KEY (class_id) REFERENCES Classes(id),
    FOREIGN KEY (student_id) REFERENCES Students(id),
    PRIMARY KEY (class_id, student_id)
);

-- Создание таблицы Schedule (Расписание)
CREATE TABLE IF NOT EXISTS Schedule (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    class_id INTEGER NOT NULL,
    subject_id INTEGER NOT NULL,
    teacher_id INTEGER NOT NULL,
    start_time DATETIME NOT NULL,
    end_time DATETIME NOT NULL,
    FOREIGN KEY (class_id) REFERENCES Classes(id),
    FOREIGN KEY (subject_id) REFERENCES Subjects(id),
    FOREIGN KEY (teacher_id) REFERENCES Teachers(id)
);

Создание таблиц

-----------------------------------------

-- Заполнение таблицы Teachers
INSERT INTO Teachers (name, email, phone_number) VALUES
('Mr. Smith', 'mr.smith@example.com', '555-1234'),
('Ms. Johnson', 'ms.johnson@example.com', '555-5678'),
('Dr. Brown', 'dr.brown@example.com', '555-9876');

-- Заполнение таблицы Students
INSERT INTO Students (name, email, phone_number) VALUES
('Alice Davis', 'alice.davis@example.com', '555-1111'),
('Bob Wilson', 'bob.wilson@example.com', '555-2222'),
('Charlie Martinez', 'charlie.martinez@example.com', '555-3333');

-- Заполнение таблицы Subjects
INSERT INTO Subjects (subject_name) VALUES
('Mathematics'),
('Physics'),
('Chemistry'),
('Biology');

-- Заполнение таблицы Classes
INSERT INTO Classes (class_name, room_number) VALUES
('10A', 'Room 101'),
('10B', 'Room 102'),
('11A', 'Room 201');

-- Заполнение таблицы ClassStudents
INSERT INTO ClassStudents (class_id, student_id) VALUES
(1, 1), -- Alice Davis in class 10A
(1, 2), -- Bob Wilson in class 10A
(2, 3); -- Charlie Martinez in class 10B

-- Заполнение таблицы Schedule
INSERT INTO Schedule (class_id, subject_id, teacher_id, start_time, end_time) VALUES
(1, 1, 1, '2024-09-01 09:00:00', '2024-09-01 10:30:00'),
(1, 2, 2, '2024-09-01 10:45:00', '2024-09-01 12:15:00'),
(2, 3, 3, '2024-09-01 13:00:00', '2024-09-01 14:30:00'),
(3, 4, 1, '2024-09-01 14:45:00', '2024-09-01 16:15:00');

Запросы

-----------------------------------------

1. Обновите информацию об учителе с id = 2

UPDATE Teachers
SET phone_number = '555-9999'
WHERE id = 2;

2. Обновите расписание для класса с id = 4, для предмета - математика.

UPDATE Schedule
SET start_time = '2024-09-01 08:30:00', end_time = '2024-09-01 10:00:00'
WHERE class_id = 1 AND subject_id = 1 AND teacher_id = 1;

3. Удалите ученика с id = 3

DELETE FROM Students
WHERE id = 3;

4. Удалите расписание для класса с id = 2 и для предмета с id = 2

5. Переместите ученика с id = 5 из одного класса в другой
UPDATE ClassStudents
SET class_id = 4
WHERE student_id = 5;

6. Выведите информацию о студенте (имя) и названии класса, в котором он учится

SELECT s.name AS student_name, c.class_name
FROM ClassStudents cs
JOIN Students s ON cs.student_id = s.id
JOIN Classes c ON cs.class_id = c.id;

7. Выведите расписание для класса с id = 4

SELECT cl.class_name, sub.subject_name, t.name AS teacher_name, s.start_time, s.end_time
FROM Schedule s
JOIN Classes cl ON s.class_id = cl.id
JOIN Subjects sub ON s.subject_id = sub.id
JOIN Teachers t ON s.teacher_id = t.id
WHERE cl.id = 4;

8. Выведите информацию о студенте и количестве классов, в которые о записан.

SELECT s.name AS student_name, COUNT(cs.class_id) AS number_of_classes
FROM ClassStudents cs
JOIN Students s ON cs.student_id = s.id
GROUP BY s.id, s.name
HAVING COUNT(cs.class_id) > 1;
